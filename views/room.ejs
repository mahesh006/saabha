<% include ./partials/header %>

<div id="roomTitle" class="ui main text container center aligned">
    <h2 class="ui header" id="roomName"><%= roomName %></h2>
</div>

<div id="main" class="ui three centered column grid">
    <div class="row">
        <div class="ten wide column">
            <form id="url" class="ui action input">
                <input type="text" id="youtubeURL" placeholder="Enter YouTube link">
                <button type="submit" class="ui button lightgrey">Submit</button>
            </form>
        </div>
    </div>
  

  

   

    <div class="row">
        <div class="eleven wide column">
            <div class="videoWrapper">
                    <div id="player"></div>
            </div>
        </div>
    </div>
    <p id="text"></p>
</div>


<div id="me"></div>


<div id="remote-container">

</div>

<div id="canvas-container">

<script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>

<script src="/socket.io/socket.io.js"></script>
<script src="/js/AgoraRTCSDK-2.4.0.js"></script>
<script src="/js/script.js"></script>
<script>
           
           let ws = null;
let polarityTracker = [0, 0, 0];

// Happy/Sad minimums
const happyMin = 0.3;
const sadMin = -0.3;

const emojiMap = {
  0: '😐',
  1: '😃',
  2: '😞'
};

var getAuthentication = async function() {

}

/**
Accepts an array of 3 value. 1st index is neutral, 2nd is happy, 3rd is sad
**/
const trackPolarity = (polarityTracker, polarityScore)  => {
  if (polarityScore <= happyMin && polarityScore >= sadMin) {
    polarityTracker[0] += 1
    console.log('neutral')
    sad()
  } else if (polarityScore > happyMin) {
    polarityTracker[1] += 1
    console.log('happy')
    happy()
  } else if (polarityScore < sadMin) {
    polarityTracker[2] += 1
    console.log('sad')
    neutral()
  }
  return polarityTracker;
}

const setEndCallStatus = (polarityTracker) => {
  const index = polarityTracker.indexOf(Math.max(...polarityTracker));
  let endCallStatusDiv = document.querySelector("#end-call-status");
  if (endCallStatusDiv) {
    endCallStatusDiv.style.display = 'block';
    //endCallStatusDiv.querySelector("#call-status").innerHTML = emojiMap[index];
  }
}

var closeSocket = () => {
  if (ws) {
    ws.send(JSON.stringify({
      "type": "stop_request"
    }));

    setEndCallStatus(polarityTracker);
  } else {
    alert('Connection not open!');
  }
};

var openSocket = async function() {

  /**
   * The JWT token you get after authenticating with our API.
   * Check the Authentication section of the documentation for more details.
   */
  // const accessToken = json.accessToken;
  call();
  const accessToken = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlFVUTRNemhDUVVWQk1rTkJNemszUTBNMlFVVTRRekkyUmpWQ056VTJRelUxUTBVeE5EZzFNUSJ9.eyJodHRwczovL3BsYXRmb3JtLnN5bWJsLmFpL3VzZXJJZCI6IjQ5MzQzOTUzOTI2ODgxMjgiLCJpc3MiOiJodHRwczovL2RpcmVjdC1wbGF0Zm9ybS5hdXRoMC5jb20vIiwic3ViIjoiSTNiYTJUWmpiRnpYZkNyUUtKY2ZyaEI5Z0F4RHA0ejRAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vcGxhdGZvcm0ucmFtbWVyLmFpIiwiaWF0IjoxNjMwNDEwMDE4LCJleHAiOjE2MzA0OTY0MTgsImF6cCI6IkkzYmEyVFpqYkZ6WGZDclFLSmNmcmhCOWdBeERwNHo0IiwiZ3R5IjoiY2xpZW50LWNyZWRlbnRpYWxzIn0.IsnTceARc2awSJr03LWE2MNkutCxKD0yM_fRSD9yMAtO7bQTGayO-L9Zi4wMNvwIQjvXWn7xu5zRTQLBnND9yHBezMnnlFYXUpDgf-Cu6otWoc9wFXuS3mb-b_epOKrYq50L1qVNbksEzU-YqdXRW1NGiTNKG3V3A0qKxrEuCcArcaNT4l00B1uz6_WTH_OWhEIzisUKX2lSr1EjMwEU3HraVlms-OONP_Z0lstviNiAMd2oIEqZzKusn46wnw7LI-WAVgsro0jLxPnnb80kjC0AU1c2MX7Wzomh-Gbca-TchOtQpAcUJN7Iw8ZdphuWkY__ev-8xQOrIs8RHSGNYg";
  const uniqueMeetingId = btoa("devrelations@symbl.ai");
  const symblEndpoint = `wss://api.symbl.ai/v1/realtime/insights/${uniqueMeetingId}?access_token=${accessToken}`;
  ws = new WebSocket(symblEndpoint);
  var conversationId;
  let cacheTable = [];
  // Fired when a message is received from the WebSocket server
  ws.onmessage = async (event) => {
    // You can find the conversationId in event.message.data.conversationId;
    const data = JSON.parse(event.data);
    if (data.type === 'message' && data.message.hasOwnProperty('data')) {
      console.log('conversationId', data.message.data.conversationId);
      conversationId = data.message.data.conversationId;
      console.log('onmessage event', event);
    }
    if (data.type === 'message_response') {
      for (let message of data.messages) {
        console.log('Transcript (more accurate): ', message.payload.content);
        document.getElementById('text').innerHTML += " "+ message.payload.content;
      }
      if (conversationId) {
        // You can log sentiments on messages from data.message.data.conversationId
        const sentimentEndpoint = `https://api.symbl.ai/v1/conversations/${conversationId}/messages?sentiment=true`;
        const response = await fetch(sentimentEndpoint, {
          method: 'GET',
          mode: 'cors',
          cache: 'no-cache',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${accessToken}`
          }
        });
        const resp = await response.json();
        if (response.ok) {
          let rows = "";
          // Initialize tracker.
          for (let message of resp.messages) {
            const score = message.sentiment.polarity.score;
            if (cacheTable.indexOf(message.id) === -1) {
              console.log('Polarity: ', score);
            }
            rows += `
              <tr>
                <td>${message.id}</td>
                <td>${score}</td>
              </tr>
            `
            cacheTable.push(message.id);

            trackPolarity(polarityTracker, score);

          }

          console.log('rows', rows);
          console.log('polarityTracker', polarityTracker);

          

        }
      }
    }
    if (data.type === 'topic_response') {
      for (let topic of data.topics) {
        console.log('Topic detected: ', topic.phrases)
      }
    }
    if (data.type === 'insight_response') {
      for (let insight of data.insights) {
        console.log('Insight detected: ', insight.payload.content);
      }
    }
    if (data.type === 'message' && data.message.hasOwnProperty('punctuated')) {
      console.log('Live transcript: ', data.message.punctuated.transcript);
    }
    // console.log(`Response type: ${data.type}. Object: `, data);
  };
  // Fired when the WebSocket closes unexpectedly due to an error or lost connetion
  ws.onerror  = (err) => {
    console.error(err);
  };
  // Fired when the WebSocket connection has been closed
  ws.onclose = (event) => {
    console.info('Connection to websocket closed');
  };
  // Fired when the connection succeeds.
  ws.onopen = (event) => {
    ws.send(JSON.stringify({
      type: 'start_request',
      meetingTitle: 'Websockets How-to', // Conversation name
      insightTypes: ['question', 'action_item'], // Will enable insight generation
      config: {
        confidenceThreshold: 0.5,
        languageCode: 'en-US',
        speechRecognition: {
          encoding: 'LINEAR16',
          sampleRateHertz: 44100,
        }
      },
      speaker: {
        userId: 'example@symbl.ai',
        name: 'Example Sample',
      }
    }));
  };
  const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
  /**
   * The callback function which fires after a user gives the browser permission to use
   * the computer's microphone. Starts a recording session which sends the audio stream to
   * the WebSocket endpoint for processing.
   */
  const handleSuccess = (stream) => {
    const AudioContext = window.AudioContext;
    const context = new AudioContext();
    const source = context.createMediaStreamSource(stream);
    const processor = context.createScriptProcessor(1024, 1, 1);
    const gainNode = context.createGain();
    source.connect(gainNode);
    gainNode.connect(processor);
    processor.connect(context.destination);
    processor.onaudioprocess = (e) => {
      // convert to 16-bit payload
      const inputData = e.inputBuffer.getChannelData(0) || new Float32Array(this.bufferSize);
      const targetBuffer = new Int16Array(inputData.length);
      for (let index = inputData.length; index > 0; index--) {
          targetBuffer[index] = 32767 * Math.min(1, inputData[index]);
      }
      // Send audio stream to websocket.
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(targetBuffer.buffer);
      }
    };

    
  };
  handleSuccess(stream);
}

</script>

<script>
    var roomArray = document.getElementById("roomName").innerHTML.split(":")
    var roomName = roomArray[roomArray.length-1];
    var socket = io({
        query: {
            roomName: roomName
        }
    });
    var expected = 'unstarted';

    $(function () {
        $('#url').submit(function (e) {
            e.preventDefault();
            console.log($('#youtubeURL').val())
            socket.emit('newVideo', $('#youtubeURL').val(), roomName);
            $('#youtubeURL').val('');
            return false;
        });
    });

    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            playerVars: {
                autoplay: 1,
                playsupported: true,
                fs: 1,
                rel: 0,
                origin: 'http://localhost:3000'
            },
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
        $("iframe").attr("src", "https://www.youtube.com/embed/?autoplay=1&enablejsapi=1&playsupported=true&mute=1&origin=http://localhost:3000")

    };

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        console.log("ready")
        console.log(event)
        
        socket.on('playPlayer', function () {
            expected = 'play';
            playVideo();
        });

        socket.on('pausePlayer', function () {
            expected = 'pause';
            pauseVideo();
        });

        socket.on('bufferingPlayer', function (time) {
            player.seekTo(time, true);
        });

        socket.on('newVideo', function (id) {
            player.loadVideoById(id, 0);
        });

        socket.on('newUser', function () {
            socket.emit('requestCurrentVideo');
        });
    };

    
    let name = document.getElementById("roomName").innerHTML;
    function control(){
        socket.emit('buffering', player.getCurrentTime(), roomName);
    }

    function happy(){
        socket.emit('update', {name: name, val: "happy"});
        
    }
    function sad(){
        socket.emit('update', {name: name, val: "sad"});
        
    }function neutral(){
        socket.emit('update', {name: name, val: "neutral"});
        
    }

    function emitState(playerStatus) {
        if (playerStatus == 0) {
            socket.emit('end', roomName);
        } else if (playerStatus == 1 && expected != 'play') {
            socket.emit('play', roomName);
        } else if (playerStatus == 2 && expected != 'pause') {
            socket.emit('pause', roomName);
        } else if (playerStatus == 3) {
            socket.emit('buffering', player.getCurrentTime(), roomName);
        } else if (playerStatus == 4) {
            socket.emit('status5')
        } else if (playerStatus == -1) {
            socket.emit('statusminus1')
        }
    };

    function onPlayerStateChange(event) {
        emitState(event.data);
        console.log(event.data)
    };

    function stopVideo() {
        player.stopVideo();
    };

    function pauseVideo() {
        player.pauseVideo();
    };

    function playVideo() {
        player.playVideo();
    }

    function getVideoUrl() {
        values = player.getVideoUrl();
        console.log(values)
    }

//---------------------------------------------------


</script>

<% include ./partials/footer %>